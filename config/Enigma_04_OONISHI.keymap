#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include <layout_shift_kp_override.dtsi>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

/ {
    behaviors {
        // Keep the original key_press behavior for ZMK core components

        original_key_press: original_key_press {
            compatible = "zmk,behavior-key-press";
            #binding-cells = <1>;
            label = "KEY_PRESS";
        };

        // Override the existing &kp behavior to use our custom implementation

        kp: key_press {
            compatible = "zmk,behavior-layout-shift-key-press";
            #binding-cells = <1>;
            label = "LAYOUT_SHIFT_KEY_PRESS";
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        arrow_left_right: behavior_sensor_rotate_arrow_le {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp RIGHT>;

            tap-ms = <20>;
        };

        arrow_up_down: behavior_sensor_rotate_arrow_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp UP>, <&kp DOWN>;

            tap-ms = <20>;
        };

        page_up_down: behavior_sensor_rotate_page_up_ {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp PAGE_UP>, <&kp PAGE_DOWN>;

            tap-ms = <20>;
        };

        tp_tab_ctrl_q: tp_tab_ctrl_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TP_TAB_CTRL_Q";
            #binding-cells = <0>;
            bindings = <&mt LCTRL TAB>, <&kp Q>;
        };

        tp_shift_ctrl: tp_shift_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TP_SHIFT_CTRL";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp LCTRL>;
        };

        tp_f7_mo_f8: tp_f7_mo_f8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TP_F7_MO_F8";
            #binding-cells = <0>;
            bindings = <&lt 5 F7>, <&kp F8>;
        };

        tp_hz_mo_kn: tp_hz_mo_kn {
            compatible = "zmk,behavior-tap-dance";
            label = "TP_HZ_MO_KN";
            #binding-cells = <0>;
            bindings = <&lt 5 TILDE>;
        };

        tp_space_mo_slash_mo: tp_space_mo_slash_mo {
            compatible = "zmk,behavior-tap-dance";
            label = "TP_SPACE_MO_SLASH_MO";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&lt 2 SLASH>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <6 7>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <4 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default_US {
            bindings = <
       &kp L  &kp U  &kp COMMA  &kp DOT                &kp F  &kp W  &kp R  &kp Y
&kp E  &kp I  &kp A  &kp O      &kp MINUS              &kp K  &kp T  &kp N  &kp S  &kp H
&kp Z  &kp X  &kp C  &kp V      &tp_space_mo_slash_mo  &kp G  &kp D  &kp M  &kp J  &kp B
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_1 {
            bindings = <
          &kp UP    &trans     &trans  &trans  &trans     &kp KP_N7  &kp KP_N8  &kp KP_N9
&kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans  &trans     &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans
&trans    &trans    &trans     &trans  &trans  &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans
            >;
        };

        layer_2 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
